{
  "common": {
    "connect": "Connect Wallet",
    "disconnect": "Disconnect",
    "loading": "Loading...",
    "error": "Error",
    "success": "Success",
    "search": "Search Agents/Contract Address",
    "pleaseEnterSearchKeyword": "Please enter search keyword",
    "searchFailed": "Search failed",
    "searchResults": "Search results",
    "foundResults": "Found {count} results",
    "noResultsFound": "No results found",
    "noSearchResults": "No search results found",
    "noSearchResultsDesc": "No related agents found for \"{keyword}\", please try other keywords",
    "buy": "Buy",
    "sell": "Sell",
    "buyAgent": "Buy",
    "sellAgent": "Sell",
    "stake": "Buy",
    "unstake": "Sell",
    "dbcBalance": "DBC",
    "xaaBalance": "XAA",
    "sicBalance": "SIC",
    "timeUnits": {
      "days": "d",
      "hours": "h",
      "minutes": "m",
      "seconds": "s",
      "selectDateRange": "Select Date Range",
      "1day": "1 Day",
      "7day": "7 Days",
      "14day": "14 Days",
      "30day": "30 Days",
      "90day": "90 Days"
    },
    "perDay": "day",
    "social": "Social",
    "noData": "No Data",
    "status": "Status",
    "view": "View",
    "save": "Save",
    "saving": "Saving...",
    "cancel": "Cancel",
    "addSocialMedia": "Add Social Media",
    "editSocialMedia": "Edit Social",
    "socialMediaUpdated": "Social media updated successfully",
    "updateFailed": "Update failed",
    "agentNotFound": "Agent not found",
    "unauthorized": "Unauthorized",
    "noPermissionToModify": "No permission to modify",
    "noPermissionToUpdate": "No permission to update",
    "noPermissionToDelete": "No permission to delete",
    "missingRequiredParameters": "Missing required parameters",
    "iaoTimeUpdatedSuccessfully": "IAO time updated successfully",
    "failedToUpdateIaoTime": "Failed to update IAO time",
    "socialMediaLinksUpdatedSuccessfully": "Social media links updated successfully",
    "failedToUpdateSocialMediaLinks": "Failed to update social media links",
    "updatedSuccessfully": "Updated successfully",
    "deletedSuccessfully": "Deleted successfully"
  },
  "navigation": {
    "home": "Home",
    "agents": "Agents",
    "marketplace": "Marketplace",
    "profile": "Profile",
    "trading": "Trading AI Model",
    "explore": "Explore AI Model",
    "creating": "Creating AI Model",
    "chat": "Chat",
    "model": "Creating AI Model",
    "about": "About"
  },
  "agent": {
    "details": "Agent Details",
    "buyAgent": "Buy",
    "sellAgent": "Sell",
    "performance": "Performance",
    "description": "Description",
    "history": "History",
    "rewards": "Rewards",
    "settings": "Settings",
    "loading": "Loading...",
    "notFound": "Agent not found",
    "addressCopied": "Contract address copied to clipboard",
    "chatComingSoon": "Chat feature coming soon! Stay tuned for updates.",
    "createdBy": "Created by",
    "information": "Information",
    "holders": "Holders",
    "conversationStarter": "Conversation Starter",
    "chat": "Chat",
    "accessibility": {
      "agentAvatar": "Agent Avatar",
      "creatorAvatar": "Creator Avatar",
      "copyIcon": "Copy Icon",
      "chatIcon": "Chat Icon",
      "contractLink": "View contract on DBCScan",
      "copyContractAddress": "Copy contract address"
    },
    "edit": "Edit Agent Info",
    "editPromptExamples": "Edit Prompt Examples",
    "noExamplesYet": "No conversation examples yet",
    "clickEditToAdd": "Click 'Edit Prompt Examples' to add some examples",
    "examplePrompt": "Example",
    "examplePlaceholder": "Enter conversation example here...",
    "examplesUpdateNotice": "Examples will be displayed to help users start a conversation with this AI model."
  },
  "wallet": {
    "connect": "Connect wallet",
    "connecting": "Connecting...",
    "connected": "Connected",
    "disconnect": "Disconnect",
    "balance": "Balance",
    "address": "Address",
    "connectionTimeout": "Wallet connection timeout, please try again"
  },
  "buttons": {
    "buyDBC": "BUY DBC",
    "buyXAA": "BUY XAA",
    "confirm": "Confirm",
    "cancel": "Cancel",
    "save": "Save",
    "edit": "Edit Agent Info",
    "delete": "Delete",
    "closeMenu": "Close Menu",
    "toggleMenu": "Toggle Menu",
    "toggleTheme": "Toggle Theme"
  },
  "messages": {
    "comingSoon": "Coming soon! Stay tuned for updates.",
    "connectWallet": "Please connect your wallet first",
    "transactionSuccess": "Transaction successful!",
    "transactionFailed": "Transaction failed. Please try again",
    "invalidInput": "Invalid input. Please try again",
    "networkError": "Network error. Please check your connection",
    "unauthorized": "Unauthorized operation. Please login first",
    "serverError": "Server error. Please try again later",
    "getNonceFailed": "Failed to get login credentials. Please refresh the page and try again",
    "signatureRejected": "User rejected signature",
    "nonceExpired": "Login session expired. Please refresh the page and login again",
    "walletConnectFailed": "Wallet connection failed. Please refresh the page and try again",
    "authenticationFailed": "Authentication failed. Please refresh the page and try again",
    "addressCopied": "Contract address copied",
    "info": "Info",
    "switchedToTestnet": "Switched to testnet, please click again to send",
    "switchedToMainnet": "Switched to mainnet, please click again to send",
    "switchNetworkFailed": "Please switch to DBC testnet and try again",
    "viewOnDBCScan": "View on DBCScan",
    "transactionSent": "Transaction Sent",
    "waitForConfirmation": "Please wait for confirmation",
    "transactionConfirmationTimeout": "Transaction confirmation timeout",
    "investSuccessWithAmount": "Successfully invested {amount} DBC",
    "contractTimeUpdateFailed": "Failed to update contract time",
    "contractTimeUpdateError": "Error occurred while updating contract time",
    "missingRequiredFields": "Missing required fields",
    "agentNameExists": "Agent name already exists",
    "agentSymbolExists": "Agent symbol already exists",
    "invalidStartTimestamp": "startTimestamp must be a positive integer",
    "invalidDurationHours": "durationHours must be a positive number",
    "invalidToken": "Invalid token",
    "unauthorizedAccess": "Unauthorized access",
    "updateSuccess": "Update successful",
    "updateFailed": "Update failed",
    "walletLimitOneAgent": "Each wallet address can only create one Agent"
  },
  "agentList": {
    "sortBy": "Sort by",
    "marketCap": "Market Cap",
    "latest": "Latest",
    "aiAgents": "AI Agents",
    "24h": "24h",
    "tvl": "TVL",
    "holdersCount": "Holders Count",
    "24hVol": "24h Vol",
    "status": "Status",
    "loading": "Loading...",
    "24hChange": "24h Change",
    "social": "Social",
    "lp": "LP",
    "chat": "Chat",
    "filterBy": "Filter by",
    "all": "All",
    "iaoOngoing": "IAO Ongoing",
    "tradable": "Tradable",
    "iaoComingSoon": "IAO Coming Soon",
    "noDataAvailable": "No data available",
    "change24h": "24h Change",
    "tokenPrice": "Token Price",
    "volume24h": "24h Volume",
    "liquidityPool": "Liquidity Pool",
    "agentInfo": "Agent Info",
    "symbol": "Symbol",
    "type": "Type",
    "accessibility": {
      "avatarImage": "Avatar image",
      "sortIcon": "Sort icon",
      "chatIcon": "Chat icon",
      "noDataImage": "No data image",
      "openChat": "Open chat"
    },
    "chatButton": {
      "game": "Game",
      "chat": "Chat"
    },
    "socialLinks": {
      "twitter": "Twitter",
      "telegram": "Telegram",
      "medium": "Medium",
      "github": "GitHub",
      "youtube": "YouTube"
    },
    "filter": "Filter",
    "investedXAA": "Invested XAA",
    "iaoEndCountdown": "IAO End Countdown",
    "iaoStartCountdown": "IAO Start Countdown",
    "searchResults": "Search results",
    "foundResults": "Found {count} results",
    "noResultsFound": "No results found"
  },
  "agentDetail": {
    "overview": "Overview",
    "analytics": "Analytics",
    "holders": "Holders",
    "transactions": "Transactions",
    "about": "About",
    "tokenomics": "Tokenomics",
    "team": "Team",
    "roadmap": "Roadmap",
    "documents": "Documents",
    "links": "Links",
    "price": "Price",
    "marketCap": "Market Cap",
    "volume": "Volume",
    "supply": "Supply",
    "contract": "Smart Contract",
    "fetchError": "Failed to fetch Agent details",
    "agentNotFound": "Agent not found"
  },
  "iaoPool": {
    "remainingTime": "Remaining Time",
    "title": "IAO Pool",
    "totalInPool": "Total {symbol} in IAO Pool",
    "currentTotal": "Current Total {symbol} in IAO Pool",
    "startCountdown": "Start Countdown",
    "endCountdown": "End Countdown",
    "toBeAnnounced": "To be announced",
    "youSend": "You Send",
    "iaoNotStarted": "IAO not started",
    "buyAmount": "Amount of {symbol} purchased",
    "error": "Error",
    "success": "Success",
    "connectWalletFirst": "Please connect wallet first",
    "enterValidAmount": "Please enter a valid purchase amount",
    "buySuccessful": "Purchase successful!",
    "buyFailed": "Purchase failed, please try again",
    "buyNotStarted": "Purchase not started",
    "processing": "Processing, please wait for confirmation...",
    "waitingForTokenCreation": "Waiting for creator to create token, rewards can be claimed",
    "waitingForTokenDistribution": "Waiting for creator to complete token distribution process",
    "creatorIncompleteProcess": "Creator has not completed token distribution process, please contact creator to complete IAO setup process",
    "waitingForTokenBurn": "Waiting for creator to burn tokens",
    "creatorIncompleteBurnProcess": "Creator has not completed token burn process, please contact creator to complete IAO setup process",
    "send": "Send",
    "loadingData": "Loading data...",
    "loading": "Loading...",
    "claimAfterCountdown": "Can claim after countdown ends",
    "claim": "Claim Rewards",
    "claimSuccess": "Claim successful",
    "claimFailed": "Claim failed, please try again",
    "claimRewards": "Claim Rewards",
    "tokenSentToWallet": "Tokens sent to your wallet",
    "importTokenAddress": "Please use the following contract address to add tokens to your wallet:",
    "poolDynamicTip": "As the amount of {investSymbol} in the IAO pool increases, the corresponding amount of {symbol} decreases",
    "updateTimeModal": {
      "title": "Update IAO Time",
      "description": "Update the start and end time of IAO. Only contract owner can perform this operation.",
      "iaoStartTime": "IAO Start Time",
      "iaoEndTime": "IAO End Time",
      "newStartTime": "New Start Time",
      "newEndTime": "New End Time",
      "iaoDuration": "IAO Duration",
      "days": "Days",
      "hours": "Hours",
      "startTimeHint": "* Start time must be at least 24 hours later (1 day 0 hours)",
      "startTimeError": "Start time must be at least 24 hours later",
      "endTimeHint": "* End time must be later than start time, duration 72-240 hours",
      "endTimeError": "End time setting error, please check time settings",
      "notSet": "Not set",
      "cancel": "Cancel",
      "confirm": "Confirm Update",
      "updating": "Updating...",
      "countdownFormats": {
        "startIn": "Start in {days} days {hours} hours",
        "endIn": "End in {days} days {hours} hours",
        "started": "Started",
        "ended": "Ended",
        "startedDaysAgo": "Started {days} days {hours} hours ago",
        "startedHoursAgo": "Started {hours} hours ago",
        "startedMinutesAgo": "Started {minutes} minutes ago",
        "startedJustNow": "Just started"
      },
      "loading": "Reading...",
      "calculating": "Calculating...",
      "validationErrors": {
        "selectValidTime": "Please select a valid time",
        "startBeforeEnd": "Start time must be earlier than end time",
        "endAfterNow": "End time must be later than current time",
        "startAfter24h": "Start time must be at least 24 hours later",
        "durationRange": "Duration must be within specified range",
        "endAfterStart": "End time must be later than start time"
      },
      "previewInfo": {
        "full": "IAO will start in {startHours} hours and end in {endHours} hours, lasting {durationHours} hours",
        "endTimeOnly": "IAO will end in {endHours} hours, lasting {durationHours} hours"
      },
      "successMessage": "IAO time updated",
      "successDetails": "IAO time successfully updated, new time settings are in effect",
      "errorMessage": "Failed to update IAO time",
      "errorDetails": "Error occurred while updating IAO time, please try again later",
      "error": "Error",
      "connectWalletFirst": "Please connect wallet first"
    },
    "maxButton": "Max",
    "insufficientBalance": "Insufficient balance, maximum available amount: {amount} {symbol}",
    "notEnoughBalance": "Insufficient balance",
    "investSuccess": "Successfully invested {amount} {symbol}",
    "investedAmount": "Amount of {symbol} invested",
    "investSuccessful": "Investment successful!",
    "investFailed": "Investment failed, please try again",
    "claimableAmount": "Amount of {symbol} claimable",
    "claimedAmount": "Amount of {symbol} claimed",
    "claimed": "Claimed",
    "claimSuccessWithAmount": "Successfully claimed {amount} tokens",
    "investNotStarted": "Investment not started",
    "sendSuccess": "Successfully sent {amount} {symbol}",
    "transactionSent": "Transaction sent",
    "waitForConfirmation": "Waiting for confirmation",
    "investSuccessWithAmount": "Successfully invested {amount} DBC",
    "goToDbcswap": "Go to DBCSwap to buy {symbol}",
    "approveTransaction": "Approve Transaction",
    "approving": "Approving transaction",
    "approveWaitingConfirm": "Waiting for approval confirmation",
    "approveSuccess": "Approval successful",
    "approveFailed": "Approval failed, please try again",
    "copy": "Copy",
    "copied": "Copied",
    "copyFailed": "Copy failed",
    "lpPoolData": "Liquidity Pool Data",
    "iaoCompletedData": "IAO completed data",
    "iaoReleasedAmount": "Amount of {symbol} released by IAO",
    "iaoParticipatedAmount": "Amount of {symbol} participated in IAO",
    "currentLpPoolData": "Current LP Pool Data",
    "lpPoolTokenAmount": "Amount of {symbol} in LP Pool",
    "lpPoolBaseAmount": "Amount of {symbol} in LP Pool",
    "originDeposit": "Original Investment",
    "depositIncrByNFT": "NFT Boost Amount",
    "incrByNFTTier": "NFT Tier",
    "nftBoostTip": "NFT Tier {tier}",
    "baseClaimableAmount": "Base Claimable Amount",
    "nftBoostClaimableAmount": "NFT Boost Claimable Amount",
    "claiming": "Claiming...",
    "level": "Level",
    "actualInvestedAmount": "Actual {symbol} amount after NFT boost",
    "nftBoostAmount": "NFT boost {symbol} amount",
    "lpSicAmount": "Amount of SIC in LP Pool",
    "lpXaaAmount": "Amount of XAA in LP Pool",
    "paidXaaAmount": "Amount of XAA paid",
    "claimableSicAmount": "Amount of SIC claimable",
    "updateIaoTime": "Update IAO Time",
    "createToken": "Create Token",
    "creatingToken": "Creating token...",
    "operationFailed": "Operation failed",
    "notAuthorized": "You don't have permission to perform this operation",
    "onlyCreatorAfterSuccess": "Only creator can create token after IAO success",
    "tokenCreationSuccess": "Token creation successful",
    "tokenCreationInitiated": "Token creation task initiated",
    "tokenCreationSubmitted": "Token creation task submitted",
    "tokenCreating": "Creating token...",
    "tokenCreated": "Token created",
    "tokenCreationFailed": "Token creation failed",
    "retryCreateToken": "Retry Create Token",
    "refreshStatus": "Refresh Status",
    "refresh": "Refresh",
    "refreshing": "Refreshing...",
    "updatingData": "Updating data...",
    "notStarted": "Not started",
    "comingSoon": "Coming soon",
    "inProgress": "In progress",
    "ended": "Ended",
    "availableBalance": "Available Balance",
    "loadingFundingInfo": "Loading funding info...",
    "realTimeFundingProgress": "Real-time funding progress",
    "raised": "Raised",
    "target": "Target",
    "investors": "Investors",
    "people": "people",
    "remaining": "Remaining",
    "progressTip": "Funding progress updates automatically every 30 seconds, target amount is $1500 USD",
    "updatePaymentContract": "Deploy Payment Contract",
    "iaoStatusTitle": "Final IAO Result",
    "iaoSuccessful": "Successful",
    "iaoFailed": "Failed",
    "finalAmount": "Final Amount",
    "targetAmount": "Target Amount",
    "investorCount": "Investor Count",
    "overAchieved": "Over achieved",
    "underAchieved": "Under achieved",
    "iaoSuccessTitle": "🎉 IAO Successfully Completed!",
    "iaoSuccessMessage": "Congratulations! Funding target has been reached. {isCreator, select, true {You can start creating tokens and deploying payment contracts.} other {Tokens will be distributed to investors after the creator completes related operations.}}",
    "iaoSuccessCreatorTip": "💡 Please wait patiently for token creation to complete, then you can claim your token rewards.",
    "iaoFailedTitle": "⚠️ IAO Not Achieved",
    "iaoFailedMessage": "Funding did not reach the minimum requirement of $1500 USD. Investors need to manually claim $XAA, and can initiate IAO again after 7 days.",
    "creatorSuggestions": "📊 Suggestions:",
    "creatorSuggestionsList": {
      "analyze": "• Analyze failure reasons and optimize the plan",
      "community": "• Strengthen community building and marketing",
      "editPrompt": "• Optimize prompts and examples",
      "retry": "• Can retry after 7 days"
    },
    "investmentRefund": "💰 Investment Processing:",
    "refundAutomatic": "✅ Click the button below to claim investment amount",
    "checkWallet": "📋 Check wallet balance after claiming",
    "refreshIfNeeded": "🔄 If not received, please refresh status",
    "thankYouMessage": "💡 Thank you for your attention, looking forward to next attempt",
    "refreshingStatus": "Refreshing...",
    "refreshStatusButton": "Refresh Status",
    "claimRefund": "Claim Refund",
    "refundSentToWallet": "Refund sent to your wallet",
    "yourInvestInfo": "Your Investment Info",
    "yourInvest": "Your invested {symbol}",
    "waitingForRefund": "Refund can be claimed 10 minutes after IAO ends",
    "waitingToClaimRefund": "Waiting to claim",
    "alreadyClaimed": "Already claimed",
    "rewardClaimed": "Reward claimed",
    "refundClaimed": "Refund claimed",
    "refundWaitingTime": "Need to wait 10 minutes after IAO ends to claim refund. End time: {time}",
    "loadingWaitingTime": "Loading waiting time info...",
    "iaoDeploying": "IAO is deploying",
    "iaoDeployingDescCreator": "System is deploying your IAO contract. Deployment process may take several minutes, after completion you need to refresh the page to view results. Please come back later to refresh this page.",
    "iaoDeployingDescUser": "System is deploying IAO contract. Deployment process may take several minutes, after completion you need to refresh the page to view results. Please come back later to refresh this page.",
    "iaoDeployFailed": "IAO deployment failed",
    "iaoDeployFailedDescCreator": "Your IAO contract deployment failed, please click the button below to retry deployment.",
    "iaoDeployFailedDescUser": "IAO contract deployment failed, please wait for creator to redeploy IAO contract.",
    "redeployIaoFailed": "Redeploy IAO (last time failed)",
    "iaoNotReached": "IAO not reached",
    "iaoNotReachedWaitDescCreator": "Your IAO did not reach the target. To ensure all participants have sufficient time to claim refunds, you need to wait 7 days after IAO ends to redeploy new IAO contract {remainingTime}.",
    "iaoNotReachedWaitDescUser": "This IAO did not reach the target, all participants can claim refunds. Creator needs to wait 7 days after IAO ends to redeploy new IAO contract {remainingTime}.",
    "waitForRedeployAfter7Days": "Wait 7 days to redeploy",
    "iaoNotReachedCanRedeployDescCreator": "Your IAO did not reach the target. 7-day waiting period has passed, please first confirm all participants have had sufficient time to claim refunds, then click the \"Confirm Ready to Redeploy\" button below. After confirmation, you will be able to deploy new IAO contract, which will not affect old users' refund operations.",
    "iaoNotReachedCanRedeployDescUser": "This IAO did not reach the target, all participants can claim refunds. 7-day waiting period has passed, creator can now redeploy new IAO contract.",
    "deployNewIaoContract": "Deploy New IAO Contract",
    "confirmReadyToRedeploy": "Confirm Ready to Redeploy",
    "iaoDeployNotCompleted": "IAO deployment not completed",
    "iaoDeployNotCompletedDescCreator": "Your IAO contract has not been successfully deployed, please click the button below to retry deployment.",
    "iaoDeployNotCompletedDescUser": "IAO contract has not been successfully deployed, please wait for creator to complete deployment.",
    "redeployIao": "Redeploy IAO",
    "cannotRedeploy": "Cannot redeploy",
    "waitSevenDaysAfterIaoEnd": "Need to wait 7 days after IAO ends to redeploy new IAO contract {remainingTime}.",
    "confirmed": "Confirmed",
    "confirmedReadyToRedeploy": "You have confirmed ready to redeploy. Now you can click the green button to deploy new IAO contract.",
    "redeployIaoConfirmation": "Redeploying IAO will create a completely new IAO contract, all previous investment data will be reset. Old users can still claim refunds from old contract without being affected. Are you sure to continue?",
    "deploying": "Deploying",
    "deployingNewIaoContract": "Deploying new IAO contract, please wait...",
    "iaoRedeploySuccess": "Successfully deployed new IAO contract. All investment data has been reset, page will refresh in 3 seconds. Old users can still claim refunds from old contract.",
    "redeployIaoFailedLog": "Redeploy IAO failed:",
    "remainingWaitTime": "(Still need to wait {days} days {hours} hours)",
    "redeployNotAffectRefunds": "Note: Deploying new contract will not affect old users' refund operations, they can still claim refunds from old contract."
  },
  "tokenDistribution": {
    "iaoManagement": "Iao Management",
    "iaoSuccessful": "Iao Successful",
    "createToken": "Create Token",
    "deployDrc20Contract": "Deploy Drc20 Contract",
    "completed": "Completed",
    "creating": "Creating",
    "retryCreation": "Retry Creation",
    "tokenDistribution": "Token Distribution",
    "distributeTokensAddLiquidity": "Distribute Tokens Add Liquidity",
    "distributing": "Distributing",
    "distributionFailed": "Distribution Failed",
    "distributionPartialSuccess": "Distribution Partial Success",
    "waiting": "Waiting",
    "burnTokens": "Burn Tokens",
    "burnXaaTokens": "Burn Xaa Tokens",
    "burning": "Burning",
    "tokenAddress": "Token Address",
    "managementCompleted": "Management Completed",
    "remainingTime": "Remaining Time",
    "error": "Error",
    "walletAuthRequired": "Please connect wallet and complete authentication first",
    "burnTaskSubmitted": "XAA burn task submitted",
    "taskSubmitted": "Task submitted, processing in background...",
    "burnFailed": "Burn failed",
    "unknownError": "Unknown error",
    "ownershipTransferSuccess": "Ownership transfer successful",
    "ownershipTransferredToCreator": "Token ownership successfully transferred to creator",
    "ownershipTransferFailed": "Ownership transfer failed",
    "transferError": "Error occurred during transfer process",
    "queryTimeout": "Query timeout",
    "taskStillProcessing": "Task is still processing, please manually refresh later to view results",
    "queryFailed": "Query failed",
    "cannotGetTaskStatus": "Cannot get task status, please manually refresh later",
    "ownershipTransferTaskSubmitted": "Token ownership transfer task submitted",
    "iaoCompletedData": "Iao Completed Data",
    "iaoReleasedAmount": "Iao Released Amount",
    "iaoParticipatedAmount": "Iao Participated Amount",
    "lpPoolData": "Lp Pool Data",
    "lpPoolTokenAmount": "Lp Pool Token Amount",
    "lpPoolBaseAmount": "Lp Pool Base Amount",
    "copy": "Copy",
    "copied": "Copied",
    "claimSuccess": "Claim Success",
    "refundSentToWallet": "Refund Sent To Wallet",
    "claimFailed": "Claim Failed",
    "waitingForRefund": "Waiting For Refund",
    "connectWalletFirst": "Connect Wallet First",
    "basicInfo": "Basic Info",
    "agentName": "Agent Name",
    "tokenSymbol": "Token Symbol",
    "totalSupply": "Total Supply",
    "distributionPlan": "Distribution Plan",
    "iaoContract": "Iao Contract",
    "autoCompleted": "Auto Completed",
    "creator": "Creator",
    "airdropWallet": "Airdrop Wallet",
    "aiMiningContract": "Ai Mining Contract",
    "liquidity": "Liquidity",
    "distributionStatus": "Distribution Status",
    "collapse": "Collapse",
    "expand": "Expand",
    "distributingTokens": "Distributing Tokens",
    "progress": "Progress",
    "currentStep": "Current Step",
    "distributionDetails": "Distribution Details",
    "amount": "Amount",
    "address": "Address",
    "confirmed": "Confirmed",
    "failed": "Failed",
    "processing": "Processing",
    "totalDistributed": "Total Distributed",
    "close": "Close",
    "submitting": "Submitting",
    "retryDistribution": "Retry Distribution",
    "retryFailedSteps": "Retry Failed Steps",
    "startDistribution": "Start Distribution",
    "distributionCompleted": "Distribution Completed",
    "tokenOrSupplyNotSet": "Token or Supply Not Set",
    "distributionTaskSubmitted": "Distribution Task Submitted",
    "taskProcessingInBackground": "Task Processing In Background",
    "taskSubmissionFailed": "Task Submission Failed",
    "distributionTaskSubmissionFailed": "Distribution Task Submission Failed",
    "networkError": "Network Error"
  },
  "paymentContract": {
    "title": "Deploy Payment Contract",
    "description": "Set payment contract parameters, which will be associated with the current Token after deployment",
    "basicInfo": "Basic Information",
    "freeRequestConfig": "Free Request Configuration",
    "vipConfig": "VIP Configuration",
    "ownerAddress": "Owner Address",
    "paymentToken": "Payment Token",
    "addressFreeRequestCount": "Address Free Request Count",
    "freeRequestCount": "Free Request Count",
    "minUsdBalance": "Minimum USD Balance",
    "vipMonthlyQuotas": "VIP Monthly Quotas",
    "vipPriceFixed": "VIP Fixed Price",
    "vipPriceMonthly": "VIP Monthly Price",
    "cancel": "Cancel",
    "deploy": "Deploy Contract",
    "deploying": "Deploying...",
    "error": "Error",
    "success": "Success",
    "tokenAddressRequired": "Token address cannot be empty",
    "deploySuccess": "Payment contract deployed successfully",
    "deployFailed": "Failed to deploy payment contract"
  },
  "tokenInfo": {
    "totalSupply": "Total supply in first 8 years: 100 billion, with 5 billion mined annually thereafter",
    "iaoAllocation": "15% of tokens will be sold through IAO, only accepting $XAA. Investors will receive tokens proportional to their $XAA investment.",
    "iaoDuration": "After the IAO period, 95% of $XAA will be allocated to the on-chain liquidity pool, never to be revoked, with LP tokens sent to a black hole address. 5% of $XAA will be burned.",
    "tradingPair": "After IAO ends, 10% of tokens and $XAA will immediately establish a liquidity pool on DBCSwap, enabling free trading."
  },
  "agents": {
    "filter": "Filter",
    "sortBy": "Sort By",
    "all": "All",
    "iaoOngoing": "Iao Ongoing",
    "tradable": "Tradable",
    "iaoComingSoon": "Iao Coming Soon",
    "marketCap": "Market Cap",
    "latest": "Latest",
    "investedXAA": "Invested XAA",
    "holdersCount": "Holders Count",
    "iaoEndCountdown": "Iao End Countdown",
    "iaoStartCountdown": "Iao Start Countdown",
    "tokenPrice": "Token Price",
    "volume24h": "Volume 24h",
    "liquidityPool": "Liquidity Pool",
    "change24h": "Change 24h",
    "status": "Status",
    "agentInfo": "Agent Info",
    "symbol": "Symbol",
    "type": "Type",
    "chat": "Chat",
    "noDataAvailable": "No Data Available",
    "accessibility": {
      "avatarImage": "Avatar Image",
      "sortIcon": "Sort Icon",
      "chatIcon": "Chat Icon",
      "noDataImage": "No Data Image",
      "openChat": "Open Chat"
    },
    "chatButton": {
      "game": "Game",
      "chat": "Chat"
    }
  },
  "marketData": {
    "marketCap": "Market Cap",
    "volume24h": "24h Volume",
    "totalSupply": "Total Supply",
    "holders": "Holders",
    "tba": "TBA",
    "zero": "0",
    "units": {
      "billion": "Billion",
      "million": "Million",
      "thousand": "Thousand",
      "billionShort": "B",
      "millionShort": "M",
      "thousandShort": "K"
    }
  },
  "holderDistribution": {
    "title": "Holder Distribution ({count} holders)",
    "address": "Address",
    "percentage": "Percentage",
    "previous": "Previous",
    "next": "Next",
    "loading": "Loading...",
    "tokenNotCreated": "Token has not been created yet, it will be automatically created after IAO success"
  },
  "agentDescription": {
    "title": "Description",
    "platform": "XAIAgent is a blockchain-based decentralized AI Model platform that integrates the creation, utilization, deployment, and trading of AI Models. Through no-code development tools, general users can easily create AI Models, while advanced developers can develop and deploy more sophisticated AI Models through the XAgentScope framework. Utilizing the GPU mining network of the DBC chain ensures complete decentralization of AI execution while providing data privacy, high performance, and low-cost advantages. The platform incorporates various AI models to support complex tasks and multi-round conversations, and promotes continuous ecosystem growth through a multi-token economic model, making it an all-in-one platform that integrates AI and blockchain.",
    "tools": "It provides development tools for ordinary users and XAgentScope framework for advanced developers.",
    "infrastructure": "Through DBC blockchain's GPU mining network support, XAIAgent ensures completely decentralized AI operation, providing data privacy, high performance and low cost advantages.",
    "models": "The platform has pre-installed various AI models that can handle complex tasks and multi-round conversations.",
    "ecosystem": "Its token economic model promotes sustainable ecosystem growth, making XAIAgent an integrated platform for AI and blockchain technology.",
    "conversationStarters": {
      "createAgent": "Help me create an AI Model",
      "functions": "What functions do you have?",
      "agentTypes": "What types of AI Models can you create?",
      "usage": "Can you tell me how to use xx as a Model?"
    }
  },
  "buy-dbc": {
    "title": "How to Purchase DBC and Transfer It to Your Wallet",
    "step1": {
      "title": "Buy DBC on Gate.io",
      "description": {
        "prefix": "Visit",
        "suffix": "to purchase DBC"
      }
    },
    "step2": {
      "title": "Add a Custom Network to Your Wallet",
      "description": {
        "prefix": "You can use wallets like",
        "middle": "or",
        "suffix": ""
      }
    },
    "step3": {
      "title": "Configure the Network with the Following Details:",
      "networkName": "Network Name:",
      "networkNameValue": "DeepBrainChain Mainnet",
      "chainRPC": "Chain RPC URL:",
      "chainID": "Chain ID:",
      "chainIDValue": "19880818",
      "currencySymbol": "Currency Symbol:",
      "currencySymbolValue": "DBC"
    },
    "step4": {
      "title": "Withdraw DBC from Gate.io",
      "description": {
        "prefix": "When withdrawing, choose",
        "suffix": "as the network"
      }
    }
  },
  "accessibility": {
    "logo": "XAI Model Platform Logo",
    "chatIcon": "Chat Icon",
    "searchIcon": "Search Icon",
    "walletIcon": "Wallet Icon",
    "menuIcon": "Menu Icon",
    "closeIcon": "Close Icon",
    "themeIcon": "Theme Icon",
    "languageIcon": "Language Icon",
    "copyIcon": "Copy Icon",
    "agentAvatar": "Agent Avatar",
    "creatorAvatar": "Creator Avatar",
    "closeSearch": "Close Search"
  },
  "chat": {
    "tips": "Price",
    "bottom": {
      "price": "This image generation is free",
      "rule1": "$0.1 STID per generation",
      "rule2": "Hold $100 STID for free forever",
      "rule3": "First 100K generations free",
      "auser": "Total users:",
      "apic": "Total generations:"
    },
    "wechatcopied": "The sharing information has been copied",
    "share": "AI drew a \"me\"—do you think it looks like me?\nWant to see what you'd look like? Try it here:\nhttps://app.xaiagent.io/styleid\n\n#StyleIDChallenge #AIArt #XAIAGENT",
    "shareHeader": "This is how AI sees me — I picked the ",
    "base": "Custom Style",
    "sharetail": "! Try StyleID and see yours 👇  \nTry it now 👉 https://app.xaiagent.io/styleid \nJoin the community 👉 https://t.me/XAIAgentAI \nMy AI-generated image👇\n",
    "need": "StyleID requires a photo containing a face",
    "Xaiagent": "XAIAgent is a blockchain-based decentralized AI model platform that integrates the creation, use, deployment, and trading of AI models",
    "StyleID": "Generate task photos, users only need to provide one photo to quickly obtain their own unique personal photos that support multiple styles",
    "LogoLift": "Logo generation, various styles of logos can be generated through text dialogue",
    "PicSpan": "Expand the image to any desired scale",
    "selectagent": "Select an agent",
    "inputHolder": "Upload a photo",
    "inputInfo": "AI model might make mistakes. Please check important information.",
    "Data": {
      "Scholar GPT": {
        "metrics": "DATA +45.67% | Market Cap: $222M",
        "prompt": "Enhance research with 200M+ resources and built-in critical reading skills. Access Google Scholar, PubMed, JSTOR, Arxiv, and more, effortlessly.",
        "examples": [
          "Find the latest research about AI",
          "I'll provide a research paper link; Please review it critically.",
          "I'll upload a PDF paper; Use critical skills to read it.",
          "Type \"ls\" to list my built-in critical reading skills."
        ]
      },
      "DeepSeek V3": {
        "metrics": "DATA +50.23% | Market Cap: $230M",
        "prompt": "Explore deep learning research with over 250M resources. Access specialized datasets and models.",
        "examples": [
          "Find recent advancements in deep learning",
          "Review this research paper on neural networks.",
          "Analyze this PDF on convolutional neural networks.",
          "List my deep learning expertise."
        ]
      },
      "DeepSeek R1": {
        "metrics": "DATA +48.33% | Market Cap: $225M",
        "prompt": "Dive into research on reinforcement learning. Access cutting-edge papers and models.",
        "examples": [
          "Find the latest in reinforcement learning",
          "Critically review this research paper.",
          "Read this PDF on reinforcement learning.",
          "List my expertise in reinforcement learning."
        ]
      },
      "Chatgpt o4": {
        "metrics": "DATA +44.67% | Market Cap: $220M",
        "prompt": "Conduct general research with GPT-4. Access a wide range of topics and resources.",
        "examples": [
          "Find information on a general topic",
          "Review this research paper.",
          "Read this document.",
          "List my general research skills."
        ]
      }
    },
    "data": {
      "Xaiagent": {
        "description": "XAIAgent is a blockchain-based decentralized AI model platform that integrates the creation, use, deployment, and trading of AI models",
        "prompts": [
          "Help me create an AI Model",
          "What functions do you have?",
          "What types of AI Models can you create?",
          "Can you tell me how to use xx as a Model?"
        ]
      },
      "StyleID": {
        "description": "Generate task photos, users only need to provide one photo to quickly obtain their own unique personal photos that support multiple styles.",
        "prompts": [
          "Create a cyberpunk-style image for me with neon lights and futuristic vibes.",
          "Can you transform my photo into an ink-wash painting style, like traditional Chinese art?",
          "I'd like a Japanese-style 'light and fresh' photo with natural lighting.",
          "Generate a retro film-style photo with a grainy, nostalgic look."
        ]
      },
      "LogoLift": {
        "description": "Logo generation, various styles of logos can be generated through text dialogue",
        "prompts": [
          "I want a logo with a strong sense of technology, mainly in blue and purple colors, with a futuristic feel. Can you help me design one?",
          "Please design a minimalist style logo for me, with black and white color scheme and abstract letter 'X', suitable for blockchain AI models",
          "I hope the logo can embody the concepts of decentralization and artificial intelligence. Can we try several different design styles?",
          "Can you generate a logo with dynamic visual effects that is suitable for social media avatars?"
        ]
      },
      "PicSpan": {
        "description": "Expand the image to any desired scale",
        "prompts": [
          "Can you help me expand the left and bottom of this image while maintaining its original style?",
          "Can you expand this image to a 16:9 widescreen ratio while keeping the subject centered?",
          "Can we make the extended parts more creative, such as adding some details related to the original image?",
          "Can the expanded image blend more naturally? If there are any inconsistencies, can you optimize them?"
        ]
      }
    },
    "explore": "Explore AI Model",
    "trade": "Trade AI Model",
    "signup": "Signup",
    "login": "login",
    "username": "Username",
    "password": "Password",
    "confirm": "Confirm",
    "today": "Today",
    "7daysago": "This week",
    "thinking": "Thinking...",
    "Cinematic": {
      "name": "Cinematic",
      "prompt": "cinematic lighting, dramatic atmosphere, film grain, 35mm lens"
    },
    "Anime": {
      "name": "Anime",
      "prompt": "anime style, vibrant colors, sharp details, studio ghibli inspired"
    },
    "Cyberpunk": {
      "name": "Cyberpunk",
      "prompt": "neon lights, futuristic cityscape, rain reflections, cyberpunk 2077 style"
    },
    "Watercolor": {
      "name": "Watercolor",
      "prompt": "soft watercolor texture, gentle brush strokes, pastel colors"
    },
    "LowPoly": {
      "name": "Low Poly",
      "prompt": "low poly geometric shapes, vibrant colors, minimalist 3d style"
    },
    "Portrait": {
      "name": "Portrait",
      "prompt": "professional portrait photography, shallow depth of field, 85mm lens"
    },
    "OilPainting": {
      "name": "Oil Painting",
      "prompt": "oil on canvas, textured brush strokes, classical art style"
    },
    "Minimalist": {
      "name": "Minimalist",
      "prompt": "clean lines, simple shapes, monochromatic colors, modern design"
    },
    "PixelArt": {
      "name": "Pixel Art",
      "prompt": "8-bit style, retro gaming aesthetic, blocky pixels, vibrant palette"
    },
    "Sketch": {
      "name": "Sketch",
      "prompt": "hand-drawn pencil sketch, rough outlines, shading with hatching"
    },
    "ChalkDrawing": {
      "name": "Chalk Drawing",
      "prompt": "chalkboard texture, soft pastel colors, hand-drawn educational style"
    },
    "Claymation": {
      "name": "Claymation",
      "prompt": "stop-motion clay texture, soft lighting, tactile material feel"
    },
    "ComicBook": {
      "name": "Comic Book",
      "prompt": "bold outlines, halftone patterns, vibrant primary colors, pop art style"
    },
    "Vaporwave": {
      "name": "Vaporwave",
      "prompt": "retro 80s aesthetic, pastel neon colors, glitch art effects"
    },
    "Ukiyoe": {
      "name": "Ukiyo-e",
      "prompt": "japanese woodblock print, flat colors, traditional asian art style"
    },
    "isImageThinking": "Generating Image...",
    "alreadyuseagent": "AI model has been called",
    "noface": "There is no face or the prompt is too unclear."
  },
  "cryptoChart": {
    "timeIntervals": {
      "30m": "30m",
      "1h": "1h",
      "4h": "4h",
      "1d": "1d",
      "1w": "1w"
    },
    "volume": "Volume",
    "priceArea": "Price Area",
    "volumeArea": "Volume Area",
    "loading": "Loading...",
    "error": "Error loading chart data",
    "retry": "Retry",
    "noData": "No data available",
    "waitForIoComplete": "Price trend will be available after IAO ends and trading begins"
  },
  "nft": {
    "loadingStakedNFTs": "Loading staked NFTs...",
    "totalStakedValue": "Total Staked Value",
    "totalClaimableRewards": "Total Claimable Rewards",
    "claimAllRewards": "Claim All Rewards",
    "stakeNFTRewardDetail": "NFT Stake Reward Details",
    "stake": "Stake",
    "staked": "Staked",
    "selected": "Selected",
    "itemCount": "items",
    "totalDailyReward": "NFT Staking Daily Rewards",
    "rewardUnit": "XAA/Day",
    "cancel": "Cancel",
    "confirming": "Confirming...",
    "confirmStake": "Confirm Stake",
    "close": "Close",
    "noStakeableNFT": "No stakeable NFTs",
    "noStakedNFT": "No staked NFTs",
    "stakeableNFT": "Stakeable NFT",
    "stakedNFT": "Staked NFT",
    "count": "Count",
    "totalReward": "Total Reward",
    "dailyRewardXAA": "Daily Reward Per NFT",
    "iaoExtraReward": "IAO Extra Percentage",
    "claimedReward": "Claimed Reward",
    "startTime": "Start Time",
    "currentTime": "Current Time",
    "stakeExpireTime": "Expiry Time",
    "actions": "Actions",
    "unstake": "Unstake",
    "pleaseSelectNFT": "Please select NFT",
    "pleaseEnterValidAmount": "Please enter valid amount",
    "loading": "Loading...",
    "error": "Error",
    "success": "Success",
    "connectWallet": "Please connect wallet first",
    "networkError": "Network error",
    "stakingInProgress": "Staking in progress...",
    "stakingSuccess": "Staking successful",
    "stakingFailed": "Staking failed",
    "unstakingInProgress": "Unstaking in progress...",
    "unstakingSuccess": "Unstaking successful",
    "unstakingFailed": "Unstaking failed",
    "claimingInProgress": "Claiming rewards...",
    "claimingSuccess": "Claiming successful",
    "claimingFailed": "Claiming failed",
    "viewOnExplorer": "View on DBCScan",
    "batchStake": "Stake NFT",
    "nftBalance": "NFT Balance",
    "noNFTTip": "Don't have any NFTs yet? Buy now to start earning rewards",
    "buyNFT": "Buy NFT",
    "batchClaim": "Batch Claim",
    "claiming": "Claiming",
    "selectedNFTCount": "Selected Count",
    "batchClaimingInProgress": "Batch claiming in progress",
    "batchClaimingSuccess": "Batch claim successful",
    "batchClaimingFailed": "Batch claim failed",
    "approving": "Approving Transaction",
    "pendingReward": "Pending Reward",
    "canClaim": "Claimable",
    "noPendingReward": "No Pending Reward",
    "noClaimableRewards": "No Claimable Rewards",
    "pleaseSelectNFTsWithPendingRewards": "Please select NFTs with pending rewards",
    "viewStakeDetailAndReward": "View Staking Details and Rewards",
    "connectWalletToViewStakeDetail": "Connect Wallet to View NFT Staking Details",
    "expired": "Expired"
  },
  "regions": {
    "japan": "Japan",
    "global": "Global",
    "korea": "Korea",
    "china": "China",
    "us": "United States",
    "vietnam": "Vietnam",
    "thailand": "Thailand",
    "indonesia": "Indonesia"
  },
  "create": {
    "title": "Creation Guide",
    "iaoDescription": {
      "title": "IAO Description",
      "point1": "IAO minimum duration is 72 hours, maximum is 240 hours",
      "point2": "IAO success criteria: raised $XAA not less than $1500",
      "point3": "After IAO failure, $XAA will be automatically returned to investors, and IAO can be restarted after 7 days",
      "point4": "After IAO success, AI tokens and $XAA will automatically establish trading pairs on DBCSwap within 5-20 minutes, with AI token price close to the price at IAO end"
    },
    "decentralizedAI": {
      "title": "Decentralized AI Model Service Description",
      "intro": "This is an AI service ecosystem jointly participated by developers and miners (GPU providers), operating as follows:",
      "point1": {
        "title": "Developers Upload AI Models",
        "content": "Developers do not need to deploy GPU servers themselves, they only need to package trained AI models into standardized containers (such as Docker) and provide public download links. Containers need to include clear deployment documentation, specifying hardware requirements (such as GPU memory, computing power, etc.) and operation methods."
      },
      "point2": {
        "title": "Miners Provide Computing Services",
        "content": "Miners (GPU providers) download and deploy AI containers according to developers' documentation, use their own GPU servers to run models, and provide inference/training services externally. Miners earn Token rewards by contributing computing power, with earnings linked to service quality and computing scale."
      },
      "point3": {
        "title": "Clear Hardware Requirements",
        "content": "Developers must specify the minimum hardware configuration of model containers (such as memory, CPU, RAM, etc.) to ensure miners can match requirements. For example: \"Minimum requirements: NVIDIA GPU (16GB memory), CUDA 11.4\"."
      },
      "point4": {
        "title": "Decentralized Collaboration Advantages",
        "content": "Developers don't need to maintain hardware and can focus on model optimization; miners can monetize idle GPUs and choose high-yield model deployments as needed; users get more open and low-cost AI services."
      },
      "point5": {
        "title": "Process Summary",
        "content": "Developers package models → Miners deploy and run → Users call services → Miners earn Tokens."
      }
    },
    "mining_requirements": {
      "title": "Mining Requirements",
      "ai_model_environment": {
        "title": "AI Model Runtime Environment Requirements",
        "point1": "Since AI models are deployed and run by GPU providers, detailed deployment procedures need to be specified.",
        "point2": "The minimum GPU memory requirements must be clearly stated.",
        "point3": "A container must be created according to the documentation, and the AI model should be placed in the container for easy download by GPU providers.",
        "point4": "GPU providers are called miners, and they receive Token rewards for providing GPU resources to run AI models. The total annual Token reward is 6 billion."
      }
    },
    "requirements": {
      "title": "Token Economic Model Creation",
      "supply": "{symbol} Token Supply: Total supply of 100 billion in the first 8 years, with 5 billion mined annually thereafter",
      "iao": "IAO Sale: 15% of tokens sold through IAO, only accepting $XAA",
      "iaoAllocation": {
        "title": "IAO Allocation:",
        "pool": "95% $XAA allocated to liquidity pool (permanently locked)",
        "burn": "5% $XAA will be burned"
      },
      "liquidity": "Liquidity Pool: After IAO ends, 10% {symbol} and $XAA automatically establish liquidity on DBCSwap",
      "team": "Team Allocation: 33% {symbol}, linearly unlocked over 2000 days, unlocked every 40 days",
      "mining": {
        "title": "Mining Mechanism:",
        "output": "Annual output of 5 billion {symbol}",
        "unlock": "10% immediately available, 90% unlocked over 180 days",
        "requirement": "Requires holding XAA mining NFT (minimum 1, maximum 10 XAA mining NFTs staked per machine)"
      },
      "airdrop": {
        "title": "Airdrop Allocation:",
        "holders": "1% to top 10,000 $XAA and $DBC holders",
        "nft": "1% to XAA node NFT holders"
      }
    },
    "createAgent": {
      "freeCreationNotice": "Creating an AI model requires no fees, tokens will be automatically generated after successful IAO",
      "createAIProject": "Create AI Token AI Model",
      "createAIModelProject": "Create AI Token AI Model",
      "editAIModelProject": "Edit AI Model AI Model",
      "projectName": "AI Model Project Name",
      "projectNamePlaceholder": "1-20 letters",
      "createSymbol": "AI Model Symbol",
      "symbolRule": "3-5 uppercase English letters",
      "projectDescription": "AI Model Description",
      "projectDescriptionPlaceholder": "Describe the functionality of your AI model",
      "tokenSupply": "Token Supply",
      "iaoPercentage": "IAO Percentage",
      "mining": "6 billion/year",
      "miningRate": "Mining Rate",
      "agentImage": "Logo",
      "dialogModel": "Dialog Model",
      "dialogExample": "Dialog Example",
      "userQuestion": "User Question",
      "agentResponse": "Agent Response",
      "createSuccess": "Creation Successful!",
      "created": "The AI token AI model has been successfully created. Your AI Model ID is ",
      "viewProject": "View AI Model",
      "creating": "Creating...",
      "createNow": "Create Now",
      "nameExists": "Agent name already exists",
      "symbolExists": "The agent symbol already exists.",
      "nameAndSymbolExists": "Both the agent name and symbol already exist.",
      "pleaseChooseDifferentName": "Please select a different name.",
      "pleaseChooseDifferentSymbol": "Please select a different symbol.",
      "socialLink": "Social Link",
      "socialExists": "The link should start with 'https'",
      "container": "Container Link",
      "provideDescriptionFirst": "Please provide an AI model description first",
      "generateExamples": "Generate Examples",
      "startTime": "Start Time",
      "endTime": "End Time",
      "time": "time",
      "eg1": "Example 1",
      "required": "Required",
      "optional": "Optional",
      "nameRequired": "AI model project name is required",
      "symbolRequired": "Token symbol is required",
      "descriptionRequired": "AI model description is required",
      "descriptionLimit": "AI model description should be 100-500 characters, detailing your AI model's features and characteristics",
      "descriptionExample": "Example: Deep learning-based timbre recognition system using TensorFlow to distinguish instruments and vocals, applied to music classification and speech recognition",
      "logoSizeHint": "Recommended size: 100×100 pixels, supports PNG, JPG formats",
      "containerLinkHint": "Docker image download link for your AI model container, used to deploy your AI model",
      "containerLinkExample": "Example: https://hub.docker.com/r/username/image",
      "socialLinkHint": "Your AI model's social media links",
      "twitterLink": "Twitter Link",
      "telegramLink": "Telegram Link",
      "twitterPlaceholder": "https://x.com/your_ai_model",
      "containerLink": "Container Link",
      "containerLinkLabel": "Docker Image",
      "containerLinkCopied": "Container link copied to clipboard",
      "copyContainerLink": "Copy container link",
      "containerLinkRequired": "Please enter container link",
      "containerLinkUpdated": "Container link updated successfully",
      "containerLinkUpdateFailed": "Failed to update container link",
      "noContainerLink": "No container link set",
      "edit": "Edit",
      "add": "Add",
      "save": "Save",
      "saving": "Saving...",
      "cancel": "Cancel",
      "telegramPlaceholder": "https://t.me/your_ai_model",
      "linkFormatError": "Invalid link format, must start with https://",
      "logoRequired": "Please upload a token logo",
      "startTimeRequired": "Please select start time",
      "endTimeRequired": "Please select end time",
      "viewGuide": "Creation Guide",
      "creationProcessMessage": "Your AI model is being created. This may take a few moments...",
      "agentDetails": "Agent Details",
      "useCases": "Use Cases",
      "TokenDistribution": {
        "title": "Token Economic Model",
        "points": {
          "1": "{symbol} total supply in first 8 years: 100 billion, with 5 billion mined annually thereafter",
          "2": "15% of tokens will be sold through IAO, only accepting $XAA. Investors will receive {symbol} based on their $XAA investment proportion",
          "3": "After the {hours}-hour IAO period, 95% of $XAA will be allocated to the on-chain liquidity pool, never to be revoked, with LP tokens sent to a black hole address. 5% of $XAA will be burned",
          "4": "After IAO concludes, 10% of {symbol} and $XAA will immediately establish a liquidity pool on DBCSwap, enabling free trading of {symbol}",
          "5": "The team holds 33% of {symbol}, unlocking begins after IAO concludes, with linear release over 2000 days, unlocked every 40 days",
          "6": "{symbol} mining produces 5 billion annually, with 10% of mined {symbol} available immediately and 90% released linearly over 180 days",
          "7": "XAA mining NFTs are required to participate in mining. Each machine must stake at least 1 XAA mining NFT, with a maximum of 10 XAA mining NFTs",
          "8": "1% of {symbol} airdropped to top 10,000 $XAA and $DBC holders, 1% of {symbol} airdropped to XAA node NFT holders"
        }
      },
      "price": "Price",
      "editAIProject": "Edit AI Model",
      "update": "Update",
      "fetchError": "Failed to fetch AI model data",
      "updateFailed": "Update failed",
      "createFailed": "Creation failed",
      "timeNotEditable": "Please modify in blockchain explorer",
      "viewOnExplorerForTime": "Modify time in blockchain explorer",
      "iaoStartTime": "IAO Start Time",
      "iaoDuration": "IAO Duration",
      "days": "Days",
      "hours": "Hours",
      "startTimeHint": "* Start time must be at least 24 hours later (1 day 0 hours)",
      "startTimeError": "Start time must be at least 24 hours later",
      "durationHint": "* Duration range: {min}-{max} hours ({minDays}-{maxDays} days)",
      "durationError": "Duration must be between {min}-{max} hours ({minDays}-{maxDays} days)",
      "iaoScheduleInfo": "IAO will start in {startHours} hours, last for {durationHours} hours, expected to end at {endTime}",
      "calculating": "Calculating...",
      "additionalSettingsAfterCreation": "You can set IAO time, container link, and conversation examples after creating the model",
      "translatingMultiLang": "Translating to multiple languages...",
      "translatingMultiLangTip": "Translating your AI model to multiple languages, please wait...",
      "miningRateFormula": "Annual minable tokens = Total supply × {rate}%"
    },
    "datePicker": {
      "selectDateTime": "Select Date and Time",
      "selectTimezone": "Select Timezone",
      "commonTimezones": "Common Timezones",
      "time": {
        "am": "AM",
        "pm": "PM"
      },
      "timezones": {
        "beijing": "Beijing/Shanghai",
        "tokyo": "Tokyo/Seoul",
        "singapore": "Singapore/Hong Kong",
        "newYork": "New York",
        "losAngeles": "Los Angeles",
        "london": "London",
        "paris": "Paris/Berlin",
        "sydney": "Sydney",
        "utc": "Coordinated Universal Time"
      }
    }
  },
  "containerLinkManager": {
    "containerLink": "Container Link",
    "optional": "optional",
    "saving": "Saving...",
    "save": "Save",
    "cancel": "Cancel",
    "edit": "Edit",
    "example": "Example: hub.docker.com/r/username/image or other container image links",
    "pleaseEnterContainerLink": "Please enter container link",
    "mustUseHttps": "Container link must use HTTPS protocol",
    "enterValidLinkFormat": "Please enter a valid link format",
    "updateSuccess": "Container link updated successfully",
    "updateFailed": "Failed to update container link",
    "copied": "Container link copied to clipboard",
    "copyContainerLink": "Copy container link"
  },
  "errors": {
    "error": "Error",
    "success": "Success",
    "unknownError": "Unknown Error",
    "networkError": "Network error, please check your connection",
    "unauthorized": "Unauthorized operation, please login first",
    "serverError": "Server error, please try again later",
    "invalidInput": "Invalid input, please try again",
    "connectWalletFirst": "Please connect wallet first",
    "walletAuthRequired": "Please connect wallet and complete authentication",
    "operationFailed": "Operation failed",
    "notAuthorized": "You do not have permission to perform this operation",
    "queryTimeout": "Query timeout",
    "queryFailed": "Query failed",
    "taskStillProcessing": "Task is still processing, please refresh manually later",
    "cannotGetTaskStatus": "Cannot get task status, please refresh manually later",
    "invalidToken": "Invalid token",
    "unauthorizedAccess": "Unauthorized access",
    "updateSuccess": "Update successful",
    "updateFailed": "Update failed"
  }
}
