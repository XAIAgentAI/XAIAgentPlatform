// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  address     String   @unique // 钱包地址
  nickname    String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  preferences String? // JSON string
  reviews     Review[] // 用户发布的评价
  agents      Agent[] // 用户创建的 agents
}

model Agent {
  id                        String       @id @default(uuid())
  name                      String
  description               String
  longDescription           String?
  category                  String
  avatar                    String?
  status                    String       @default("active")
  capabilities              String // JSON string array
  rating                    Float        @default(0)
  usageCount                Int          @default(0)
  marketCap                 String       @default("0")
  change24h                 String       @default("0")
  volume24h                 String       @default("0")
  creator                   User         @relation(fields: [creatorId], references: [id])
  creatorId                 String
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  examples                  Example[]
  reviews                   Review[]
  prices                    AgentPrice[]
  tasks                     Task[] // 关联到任务
  type                      String?
  tvl                       String?
  holdersCount              Int?
  socialLinks               String? // JSON string
  containerLink             String? // 容器链接
  totalSupply               Decimal? // 使用 Decimal 类型存储大数字，支持任意精度
  marketCapTokenNumber      Decimal? // 新增字段，使用 Decimal 类型以支持大数字
  symbol                    String? // 添加 symbol 字段，因为看到代码中也用到了这个
  chatEntry                 String? // 添加 chatEntry 字段，因为代码中也用到了这个
  useCases                  String? // JSON string array
  useCasesJA                String? // JSON string array
  useCasesKO                String? // JSON string array
  useCasesZH                String? // JSON string array
  statusJA                  String?
  statusKO                  String?
  statusZH                  String?
  descriptionJA             String?
  descriptionKO             String?
  descriptionZH             String?
  lifetime                  String? // 添加 lifetime 字段
  tokenAddress              String?
  iaoContractAddress        String?
  tokenAddressTestnet       String?
  iaoContractAddressTestnet String?
  paymentContractAddress    String? // 添加支付合约地址字段
  projectDescription        String? // 添加项目说明字段，存储JSON格式的多语言项目说明
  iaoTokenAmount            Decimal? // IAO代币数量字段
  iaoStartTime              BigInt? // IAO开始时间戳
  iaoEndTime                BigInt? // IAO结束时间戳
  miningRate                Decimal? // 挖矿速率（每年可挖矿的代币比例）
  // IAO成功状态相关字段
  iaoSuccessChecked         Boolean      @default(false) // 是否已检查IAO成功状态
  iaoSuccessful             Boolean? // IAO是否成功 (null表示未检查，true表示成功，false表示失败)
  iaoSuccessCheckTime       DateTime? // IAO成功状态检查时间
  // Owner管理相关状态字段
  ownerTransferred          Boolean      @default(false) // 代币owner是否已转移
  liquidityAdded            Boolean      @default(false) // 流动性是否已添加
  tokensDistributed         Boolean      @default(false) // 代币是否已分发
  tokensBurned              Boolean      @default(false) // 代币是否已销毁
  miningOwnerTransferred    Boolean      @default(false) // 挖矿合约owner是否已转移
  // 池子相关字段
  poolAddress               String? // 流动性池地址
  nftTokenId                String? // NFT Token ID
  poolCreated               Boolean      @default(false) // 池子是否已创建
  initialLiquidityAmount    Decimal? // 初始流动性代币数量
  initialXaaAmount          Decimal? // 初始流动性XAA数量
  tokenList                 TokenList? // 一对一关系
}

model Example {
  id          String @id @default(uuid())
  title       String
  description String
  prompt      String
  agent       Agent  @relation(fields: [agentId], references: [id])
  agentId     String
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  agent     Agent    @relation(fields: [agentId], references: [id])
  agentId   String
  createdAt DateTime @default(now())
}

model Chat {
  id        String   @id @default(uuid())
  name      String   @unique
  password  String
  chat      Json // 用于存储复杂的对话结构
  createdAt DateTime @default(now())
}

// 任务模型，用于异步任务处理
model Task {
  id          String    @id @default(uuid())
  type        String // 任务类型: CREATE_TOKEN, DEPLOY_PAYMENT_CONTRACT 等
  status      String // PENDING, PROCESSING, COMPLETED, FAILED, PARTIAL_SUCCESS
  result      String? // JSON格式的结果数据
  agent       Agent     @relation(fields: [agentId], references: [id])
  agentId     String
  createdBy   String // 创建者地址
  createdAt   DateTime  @default(now())
  startedAt   DateTime? // 开始执行时间
  completedAt DateTime? // 完成时间
}

// 用于存储 nonce
model AuthNonce {
  id        String   @id @default(uuid())
  nonce     String   @unique
  address   String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Count {
  project String @id @default(uuid())
  count   Int
}

model chat {
  name     String @id @default(uuid())
  password String
  chat     Json   @db.JsonB
}

model AgentPrice {
  id        Int      @id @default(autoincrement())
  agentId   String // 修改为 String 类型以匹配 Agent 的 id
  price     Float
  timestamp DateTime @default(now())
  agent     Agent    @relation(fields: [agentId], references: [id])

  @@index([agentId, timestamp])
}

model TokenList {
  id          String   @id @default(uuid())
  address     String   @unique
  name        String
  symbol      String
  chainId     Int
  decimals    Int      @default(18)
  logoURI     String
  agent       Agent    @relation(fields: [agentId], references: [id])
  agentId     String   @unique
  isActive    Boolean  @default(false)  // 只有当池子创建且添加流动性后才设为true
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  keywords    String?  // JSON string array
  version     Json     // { major: number, minor: number, patch: number }

  @@index([isActive])
}
